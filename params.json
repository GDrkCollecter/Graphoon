{"name":"Graphoon","tagline":"A force directed graph algorithm written in Lua","body":"# Graphoon\r\n[![Version](https://img.shields.io/badge/Version-1.0.1-blue.svg)](https://github.com/rm-code/Graphoon/releases/latest)\r\n[![License](http://img.shields.io/badge/Licence-MIT-brightgreen.svg)](LICENSE.md)\r\n\r\nA force directed graph algorithm written in Lua.\r\n\r\n![example](https://cloud.githubusercontent.com/assets/11627131/12313149/44ea06a0-ba65-11e5-82d0-4867022fbdf5.gif)\r\n\r\n## Introduction\r\n\r\n_Graphoon_ emerged from the graph calculation code used in both [LoGiVi](https://github.com/rm-code/logivi) and [LoFiVi](https://github.com/rm-code/lofivi).\r\n\r\nA force directed graph layout is achieved by simulating physical forces, which push and pull each node in the graph until a nice layout is found.\r\n\r\n## Basic Usage\r\n\r\nThe basic idea is that you create a new graph object, to which you can then add nodes and edges.\r\n\r\n```lua\r\nlocal GraphLibrary = require('Graphoon').Graph\r\n\r\ngraph = GraphLibrary.new()\r\ngraph:addNode( \"Ash Williams\" )\r\ngraph:addNode( \"Necronomicon\" )\r\ngraph:connectIDs( \"Ash Williams\", \"Necronomicon\" )\r\n```\r\n\r\nBy itself Graphoon only provides functionality for creating the graph and calculating the layout based on physical attraction and repulsion forces.\r\n\r\nIt provides a ```draw``` and ```update``` function, which can be used to easily write your own rendering code.\r\n\r\nThe ```draw``` function should be called with two callback functions. The first callback will be used for all nodes and the second one for all the edges.\r\n\r\n```lua\r\ngraph:draw( function( node )\r\n\t\t\t\tlocal x, y = node:getPosition()\r\n\t\t\t\tdrawCircle( 'fill', x, y, 10 )\r\n\t\t\tend,\r\n\t\t\tfunction( edge )\r\n\t\t\t\tlocal ox, oy = edge.origin:getPosition()\r\n\t\t\t\tlocal tx, ty = edge.target:getPosition()\r\n\t\t\t\tdrawLine( ox, oy, tx, ty )\r\n\t\t\tend)\r\n```\r\n\r\nAt its simplest the force calculations can be updated via ```graph:update( dt )```, but the ```update``` function also can receive optional callbacks for both nodes and edges.\r\n\r\n## Advanced usage\r\n\r\n### Using anchors\r\n\r\nAnchors can be used to attach a node to a certain position on the screen. This can be useful if you want to center a certain node for example.\r\n\r\nThis can either be done directly via the constructor of the node:\r\n\r\n```lua\r\n-- Anchor the node to the center of the screen.\r\ngraph:addNode( \"Ash Williams\", screenX * 0.5, screenY * 0.5, true )\r\n```\r\n\r\nOr by using the ```setAnchor``` function:\r\n\r\n```lua\r\n-- Invert anchor status\r\nnode:setAnchor( not node:isAnchor(), mouseX, mouseY )\r\n```\r\n\r\n### Using custom classes for Nodes and Edges\r\n\r\nIf you prefer to not touch the default classes, you can simply inherit from them and tell Graphoon to use your custom classes instead.\r\n\r\n```lua\r\nlocal GraphLibraryNode = require('lib.libfdgraph.fd').Node\r\n\r\nlocal CustomNodeClass = {}\r\n\r\n-- You can pass additional arguments to your custom class. Just make sure the\r\n-- default parameters ar in the right order.\r\nfunction CustomNodeClass.new( id, x, y, anchor, ... )\r\n    local self = GraphLibraryNode.new( id, x, y, anchor )\r\n\r\n\t-- ... Custom code\r\nend\r\n\r\nreturn CustomNodeClass\r\n```\r\n\r\n```lua\r\nlocal GraphLibrary = require('Graphoon').Graph\r\nGraphLibrary.setNodeClass( require('CustomNodeClass') )\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}